---
import type { IOptions, ISet  } from "../scripts/types";
import VerticalCaseCard from "./VerticalCaseCard.svelte";

interface Props {
  set: ISet
  options: IOptions
  size: number
}
const { set, options, size } = Astro.props
---

<collapsible-set
  class="flex flex-col justify-center items-center w-[95%] mb-5 rounded-xl shadow-xlbg-stone-900/[.07] dark:bg-stone-50/[.07]">
  <div class="toggle cursor-pointer my-2 flex gap-5 w-fit items-baseline select-none">
    <div class="text-xl sm:text-3xl font-bold hover:font-extrabold">
      {set.name}
    </div>
    <span class="dark:text-stone-500 text-sm font-light">
      {set.altNames ? 'AKA' : ''}
    {set.altNames?.map((altName, i) => {
      return <span class="font-semibold text-lg">{altName + (i < set.altNames!.length! - 1 ? ", " : "")}</span>
    })}
    </span>
  </div>

  <div class="collapsible w-full flex flex-col child:mb-5 items-center">
    {
      set.children && Object.entries(set.children)?.map(([k, setOrCase]) => (
        setOrCase.hasOwnProperty("algs") ?
          <VerticalCaseCard client:visible caso={setOrCase} options={options} size={size}/>
        :
          <Astro.self set={setOrCase} options={options} size={size} />
      ))
    }
  </div>
</collapsible-set>

<script>
  customElements.define(
    "collapsible-set",
    class extends HTMLElement {
      connectedCallback() {
        let isCollapsed = false;

        const toggler: HTMLElement | null = this.querySelector(".toggle");
        const section: HTMLElement | null = this.querySelector(".collapsible");

        const toggleCollapsed = () => {
          section &&
          (isCollapsed
          ? (section.style.display = "")
          : (section.style.display = "none"));
          isCollapsed = !isCollapsed
        }

        toggler?.addEventListener("click", () => {
          toggleCollapsed()
        });
      }
    },
  );
</script>