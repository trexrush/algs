---
import type { IOptions, IDataSet  } from "../scripts/types";
import CaseCard from "./templates/CaseCard.svelte";

interface Props {
  set: IDataSet
  options: IOptions
  recursiveCollapse?: boolean
}
const { set, options, recursiveCollapse } = Astro.props
---

<details open={recursiveCollapse ? false : true}
  class="flex flex-col justify-center items-center w-[97%] mb-5 rounded-xl shadow-xl bg-stone-900/[.07] dark:bg-stone-50/[.07]">
  <summary class=" flex my-1 pl-6 items-baseline gap-5 select-none pointer-events-none">
    <div class="text-2xl sm:text-4xl font-bold hover:font-extrabold cursor-pointer pointer-events-auto">
      {set.name}
    </div>
    <span class="text-stone-500 text-xs sm:text-sm font-light cursor-pointer pointer-events-auto">
      {set.altNames ? 'AKA ' : ''}
    {set.altNames?.map((altName, i) => {
      return <span class="font-semibold text-sm sm:text-lg">{altName + (i < set.altNames!.length! - 1 ? ", " : "")}</span>
    })}
    </span>
  </summary>

  <div class="w-full flex flex-col child:mb-5 items-center">
    {
      set.children && Object.entries(set.children)?.map(([k, setOrCase]) => (
        setOrCase.hasOwnProperty("algs") ?
          <CaseCard client:visible caso={setOrCase} options={options}/>
        :
          <Astro.self set={setOrCase} options={options} />
      ))
    }
  </div>
</details>