---
import type { IOptions, ISetV2  } from "../scripts/types";
import NewVerticalCaseCard from "./NewVerticalCaseCard.svelte";

interface Props {
  set: ISetV2
  options: IOptions
  size: number
}
const { set, options, size } = Astro.props
---

<div
  is="collapsible-set"
  class=" flex flex-col justify-center items-center w-[95%] mb-5 rounded-xl shadow-xlbg-stone-900/[.07] dark:bg-stone-50/[.07] "
>
  <div class="toggle cursor-pointer my-2 flex gap-5 w-fit items-baseline">
    <div class="text-xl sm:text-3xl font-bold hover:font-extrabold">
      {set.name}
    </div>
    <span class=" dark:text-stone-500 text-lg">
      AKA
    {set.altNames?.map((altName) => {
      return "\"" + altName + "\" "
    })}
    </span>
  </div>

  <div class="collapsible w-full flex flex-col [&>*]:mb-5 items-center">
    {
      set.children && Object.entries(set.children)?.map(([k, setOrCase]) => (
        setOrCase.hasOwnProperty("algs") ?
          <NewVerticalCaseCard client:visible caso={setOrCase} options={options} size={size} setName={set.name}/>
        :
          <Astro.self set={setOrCase} options={options} size={size} />
      ))
    }
  </div>
</div>

<script>
  customElements.define(
    "collapsible-set",
    class extends HTMLDivElement {
      constructor() {
        super();
        let isCollapsed = false;

        const toggler: HTMLElement | null = this.querySelector(".toggle");
        const section: HTMLElement | null = this.querySelector(".collapsible");

        toggler?.addEventListener("click", () => {
          section &&
            (isCollapsed
              ? (section.style.display = "")
              : (section.style.display = "none"));
              isCollapsed = !isCollapsed
        });
      }
    },
    { extends: "div" }
  );
</script>
