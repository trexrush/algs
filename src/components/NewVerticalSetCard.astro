---
import { IOptions, IGroupElementV2, ISetV2, DefaultOptions } from "../scripts/types";
import NewVerticalAlgCard from "./NewVerticalAlgCard.svelte";
import merge from "ts-deepmerge";

interface Props {
  set: ISetV2
  options: IOptions
  size: number
}
const { set, options, size } = Astro.props

let defaultMergedOptions: IOptions = merge(DefaultOptions, options)
---

<div
  is="collapsible-set"
  class=" bg-stone-900/[.07] dark:bg-stone-50/[.07] w-[95%] rounded-xl shadow-xl mb-5"
>
  <div class="toggle text-xl sm:text-3xl my-2 w-full text-center cursor-pointer font-bold hover:font-extrabold">
    {set.name}
  </div>
  <div class="collapsible w-full flex flex-col [&>*]:mb-5 items-center">
    {
      set.children && Object.entries(set.children)?.map(([k, setOrCase]) => (
        setOrCase.hasOwnProperty("algs") ?
          <NewVerticalAlgCard client:visible caso={setOrCase} options={defaultMergedOptions} size={size} setName={set.name}/>
        :
          <Astro.self set={setOrCase} options={defaultMergedOptions} size={size} />
      ))
    }
  </div>
</div>

<script>
  customElements.define(
    "collapsible-set",
    class extends HTMLDivElement {
      constructor() {
        super();
        let isCollapsed = false;

        const toggler: HTMLElement | null = this.querySelector(".toggle");
        const section: HTMLElement | null = this.querySelector(".collapsible");

        toggler?.addEventListener("click", () => {
          section &&
            (isCollapsed
              ? (section.style.display = "")
              : (section.style.display = "none"));
              isCollapsed = !isCollapsed
        });
      }
    },
    { extends: "div" }
  );
</script>
